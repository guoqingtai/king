<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd">
	<http pattern="/login.htm" security="none" />
	<http pattern="/sidemenu.htm" security="none" />
	<http pattern="/test/test.htm" security="none" />
	<http pattern="/test/ajaxtest.htm" security="none" />
	<http pattern="/ajax/**" security="none" />
	<http pattern="/css/**" security="none" />
	<http pattern="/fonts/**" security="none" />
	<http pattern="/images/**" security="none" />
	<http pattern="/js/**" security="none" />
		<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAuthenticationSuccessHandler" class="knight.a2_security.MyAuthenticationSuccessHandler">
	</beans:bean>
	
	<http use-expressions="true" auto-config="false">
		<intercept-url pattern="/**" access="authenticated" />
		<csrf disabled="true" />
		<form-login login-page="/login.htm"
			authentication-failure-url="/login.htm?error=true"
			default-target-url="/index.htm" 
			 authentication-success-handler-ref="myAuthenticationSuccessHandler" />
		<logout logout-success-url="/login.htm" />
		<http-basic />
		<!-- 增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="myFilter" />
	</http>
	

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="myFilter"
		class="knight.a2_security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!-- 如果用户的密码采用加密的话，可以加点“盐” <password-encoder hash="md5" /> -->
		</authentication-provider>
	</authentication-manager>
	<beans:bean id="myUserDetailService" class="knight.a2_security.MyUserDetailService" />

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean" class="knight.a2_security.MyAccessDecisionManager">
	</beans:bean>

	<beans:bean id="loginService" class="knight.b0_mnt.service.LoginService"></beans:bean>
	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"
		class="knight.a2_security.MyInvocationSecurityMetadataSource">
		<beans:constructor-arg>
			<beans:ref bean="loginService" />
		</beans:constructor-arg>
	</beans:bean>

</beans:beans>